//
//  ItemManager-Array-Tests.swift
//  BRBON
//
//  Created by Marinus van der Lugt on 14/02/18.
//
//

import XCTest
import BRUtils
@testable import BRBON

class ItemManager_Array_Tests: XCTestCase {

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testInit() {
        
        ItemManager.startWithZeroedBuffers = true

        let am = ItemManager(rootItemType: .array, elementType: .bool)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00
            ])
        
        var data = am.data

        XCTAssertEqual(data, exp)

        
        let am1 = ItemManager(rootItemType: .array, elementType: .bool, rootValueByteCount: 20)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00
            ])
        
        data = am1.data

        XCTAssertEqual(data, exp)
        
        
        let am2 = ItemManager(rootItemType: .array, elementType: .int8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00
            ])
        
        data = am2.data
        
        XCTAssertEqual(data, exp)
    }
    
    func testAppend() {
        
        ItemManager.startWithZeroedBuffers = true

        // Create array manager
        
        let am = ItemManager(rootItemType: .array, elementType: .int32)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00
            ])
        
        var data = am.data
        
        XCTAssertEqual(data, exp)

        
        // Append once
        
        XCTAssertEqual(am.root.append(Int32(0x12345678)), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0x00, 0x00, 0x00, 0x00
            ])
        
        data = am.data

        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        
        // Append twice
        
        XCTAssertEqual(am.root.append(Int32(0x44553366)), .success)

        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0x66, 0x33, 0x55, 0x44
            ])
        
        data = am.data
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        
        // Append wrong type
        
        XCTAssertEqual(am.root.append(Int64(0x44553366)), .typeConflict)

        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }
    }
    
    func testRemove() {
        
        
        // Create array manager with four elements
        
        let am = ItemManager(rootItemType: .array, elementType: .int64)

        XCTAssertEqual(am.root.append(Int64(0x1111111111111111)), .success)
        XCTAssertEqual(am.root.append(Int64(0x2222222222222222)), .success)
        XCTAssertEqual(am.root.append(Int64(0x3333333333333333)), .success)
        XCTAssertEqual(am.root.append(Int64(0x4444444444444444)), .success)

        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x06, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            
            0x11, 0x11, 0x11, 0x11,  0x11, 0x11, 0x11, 0x11,
            0x22, 0x22, 0x22, 0x22,  0x22, 0x22, 0x22, 0x22,
            0x33, 0x33, 0x33, 0x33,  0x33, 0x33, 0x33, 0x33,
            0x44, 0x44, 0x44, 0x44,  0x44, 0x44, 0x44, 0x44
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        let portal1 = am.root[0].portal
        let portal2 = am.root[1].portal
        let portal3 = am.root[2].portal
        let portal4 = am.root[3].portal
        
        XCTAssertEqual(portal1.int64, 0x1111111111111111)
        XCTAssertEqual(portal2.int64, 0x2222222222222222)
        XCTAssertEqual(portal3.int64, 0x3333333333333333)
        XCTAssertEqual(portal4.int64, 0x4444444444444444)
        
        
        // Remove second entry
        
        XCTAssertEqual(am.root.remove(at: 1), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x06, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            
            0x11, 0x11, 0x11, 0x11,  0x11, 0x11, 0x11, 0x11,
            0x33, 0x33, 0x33, 0x33,  0x33, 0x33, 0x33, 0x33,
            0x44, 0x44, 0x44, 0x44,  0x44, 0x44, 0x44, 0x44,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00  // Not used
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        XCTAssertEqual(portal1.int64, 0x1111111111111111)
        XCTAssertEqual(portal2.int64, 0x3333333333333333)
        XCTAssertEqual(portal3.int64, 0x4444444444444444)
        BRBON.allowFatalError = false
        XCTAssertNil(portal4.int64)
        BRBON.allowFatalError = true
        
        
        // Remove all entries
        
        XCTAssertEqual(am.root.remove(at: 0), .success)
        XCTAssertEqual(am.root.remove(at: 0), .success)
        XCTAssertEqual(am.root.remove(at: 0), .success)
        
        BRBON.allowFatalError = false
        XCTAssertEqual(am.root.remove(at: 0), .indexAboveHigherBound) // More than necessary
        BRBON.allowFatalError = true
        
        BRBON.allowFatalError = false
        XCTAssertNil(portal1.int64)
        XCTAssertNil(portal2.int64)
        XCTAssertNil(portal3.int64)
        XCTAssertNil(portal4.int64)
        BRBON.allowFatalError = true
    }
    
    func testInsert() {
        
        // Create array manager with four elements
        
        let am = ItemManager(rootItemType: .array, elementType: .int64)
        
        XCTAssertEqual(am.root.append(Int64(0x1111111111111111)), .success)
        XCTAssertEqual(am.root.append(Int64(0x2222222222222222)), .success)
        XCTAssertEqual(am.root.append(Int64(0x3333333333333333)), .success)
        XCTAssertEqual(am.root.append(Int64(0x4444444444444444)), .success)
                
        let portal1 = am.root[0].portal
        let portal2 = am.root[1].portal
        let portal3 = am.root[2].portal
        let portal4 = am.root[3].portal
        
        XCTAssertEqual(portal1.int64, 0x1111111111111111)
        XCTAssertEqual(portal2.int64, 0x2222222222222222)
        XCTAssertEqual(portal3.int64, 0x3333333333333333)
        XCTAssertEqual(portal4.int64, 0x4444444444444444)

        
        // Insert an element at the beginning
        
        XCTAssertEqual(am.root.insert(Int64(0x5555555555555555), atIndex: 0), .success)
        
        let portal5 = am.root[4].portal

        XCTAssertEqual(portal1.int64, 0x5555555555555555)
        XCTAssertEqual(portal2.int64, 0x1111111111111111)
        XCTAssertEqual(portal3.int64, 0x2222222222222222)
        XCTAssertEqual(portal4.int64, 0x3333333333333333)
        XCTAssertEqual(portal5.int64, 0x4444444444444444)
        
        
        // Insert an element at the end
        
        XCTAssertEqual(am.root.insert(Int64(0x5555555555555555), atIndex: 4), .success)
        
        let portal6 = am.root[5].portal
        
        XCTAssertEqual(portal1.int64, 0x5555555555555555)
        XCTAssertEqual(portal2.int64, 0x1111111111111111)
        XCTAssertEqual(portal3.int64, 0x2222222222222222)
        XCTAssertEqual(portal4.int64, 0x3333333333333333)
        XCTAssertEqual(portal5.int64, 0x5555555555555555)
        XCTAssertEqual(portal6.int64, 0x4444444444444444)

        
        // Insert an element past the end
        BRBON.allowFatalError = false
        XCTAssertEqual(am.root.insert(Int64(0x5555555555555555), atIndex: 6), .indexAboveHigherBound)
        BRBON.allowFatalError = true
    }
    
    func testCreateNewElements() {
        
        
        // Create empty array manager
        
        let am = ItemManager(rootItemType: .array, elementType: .int64)
        
        
        // Add two elements
        
        XCTAssertEqual(am.root.createNewElements(amount: 2, value: Int64(0x5555555555555555)), .success)
        
        let portal1 = am.root[0].portal
        let portal2 = am.root[1].portal

        XCTAssertEqual(portal1.int64, 0x5555555555555555)
        XCTAssertEqual(portal2.int64, 0x5555555555555555)
        
        XCTAssertEqual(am.root.count, 2)
    }
    
    func testArray_String() {
        
        
        // Create empty array manager
        
        let am = ItemManager(rootItemType: .array, elementType: .string, initialBufferByteCount: 1024)

        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0D, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }
        
        
        // Add a string
        
        XCTAssertEqual(am.root.append("aaaa"), .success)

        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x0D, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00,
            
            0x04, 0x00, 0x00, 0x00, 0x61, 0x61, 0x61, 0x61,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        
        // Add a second string
        
        XCTAssertEqual(am.root.append("bbbb"), .success)

        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x0D, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00,

            0x04, 0x00, 0x00, 0x00, 0x61, 0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            0x04, 0x00, 0x00, 0x00, 0x62, 0x62, 0x62, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        let portal1 = am.root[1].portal
        
        XCTAssertEqual(portal1.string, "bbbb")

        
        // Add a third and forth string, this pushes the buffer over 1KB and necessitates the allocation of more memory and an update of the pointers in the portal.
        
        XCTAssertEqual(am.root.append("cccc"), .success)
        XCTAssertEqual(am.root.append("dddd"), .success)

        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x0D, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00,

            0x04, 0x00, 0x00, 0x00, 0x61, 0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            
            0x04, 0x00, 0x00, 0x00, 0x62, 0x62, 0x62, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            
            0x04, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            
            0x04, 0x00, 0x00, 0x00, 0x64, 0x64, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
                
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        // *********************************************************
        // Note: The following test will sometimes fail.
        // (About 1 in 5 runs)
        // This seems to be an error of the XCT tester that
        // releases a block of memory too early.
        // The portal allocate/release mechanism seems to work fine.
        // *********************************************************
        
        // Test if the adjustment of the portals worked
        XCTAssertEqual(portal1.string, "bbbb")
    }
    
    func testArray_ExpandingString() {
        
        
        // Create empty array manager
        
        let am = ItemManager(rootItemType: .array, elementType: .string, elementValueByteCount: 8)
        
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0D, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00
            ])
                
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }
        
        // Add 4 strings
        
        am.root.append("aa")
        am.root.append("bb")
        am.root.append("cc")
        am.root.append("dd")
        
        let portal0 = am.root[0].portal
        let portal1 = am.root[1].portal
        let portal2 = am.root[2].portal
        let portal3 = am.root[3].portal
        
        
        // Add a third string that is larger than the current elementByteCount
        
        XCTAssertEqual(am.root.append("eeeeeeeeeeeee"), .success)
        XCTAssertEqual(portal0.string, "aa")
        XCTAssertEqual(portal1.string, "bb")
        XCTAssertEqual(portal2.string, "cc")
        XCTAssertEqual(portal3.string, "dd")
    }
    
    func testArrayInArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Create empty array manager
        
        let am = ItemManager(rootItemType: .array, elementType: .array, elementValueByteCount: 32)

        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x20, 0x00, 0x00, 0x00
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        
        // Append an array
        
        let barr1 = BrbonArray(content: [UInt16(0x1234), UInt16(0xAABB)], type: .uint16)
        XCTAssertEqual(am.root.append(barr1), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            
            // array element 1
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x34, 0x12, 0xBB, 0xAA,  0x00, 0x00, 0x00, 0x00
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        let portal = am.root[0][1].portal
        
        XCTAssertEqual(portal.uint16, 0xAABB)
        
        
        // Add another array of a different size
        
        let barr2 = BrbonArray(content: [Int32(0x12345678), Int32(0x7ABBCCDD), Int32(0x4888CCCC)], type: .int32)
        XCTAssertEqual(am.root.append(barr2), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            
            // array element 1
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x34, 0x12, 0xBB, 0xAA,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            // array element 2
            0x11, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0xDD, 0xCC, 0xBB, 0x7A,
            0xCC, 0xCC, 0x88, 0x48,  0x00, 0x00, 0x00, 0x00
            ])

        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        XCTAssertEqual(portal.uint16, 0xAABB)

        let portal1 = am.root[1][2].portal
        
        XCTAssertEqual(portal1.int32, 0x4888CCCC)

        
        // Add another element to the first array
        
        XCTAssertEqual(am.root[0].append(UInt16(0x7676)), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            
            // array element 1
            0x11, 0x00, 0x00, 0x00,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x34, 0x12, 0xBB, 0xAA,  0x76, 0x76, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            // array element 2
            0x11, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0xDD, 0xCC, 0xBB, 0x7A,
            0xCC, 0xCC, 0x88, 0x48,  0x00, 0x00, 0x00, 0x00
            ])
        

        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }

        XCTAssertEqual(portal.uint16, 0xAABB)
        XCTAssertEqual(portal1.int32, 0x4888CCCC)

        
        // Keep appending to the first array until it expands its own size, then check again
        
        XCTAssertEqual(am.root[0].append(UInt16(0x8686)), .success)
        XCTAssertEqual(am.root[0].append(UInt16(0x9696)), .success)

        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            
            // array element 1
            0x11, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x34, 0x12, 0xBB, 0xAA,  0x76, 0x76, 0x86, 0x86,
            0x96, 0x96, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            // array element 2
            0x11, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0xDD, 0xCC, 0xBB, 0x7A,
            0xCC, 0xCC, 0x88, 0x48,  0x00, 0x00, 0x00, 0x00
            ])
        
         exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }
        
        XCTAssertEqual(portal.uint16, 0xAABB)
        XCTAssertEqual(portal1.int32, 0x4888CCCC)


        // Keep adding to the first array until it grows beyond the current maximum size
        
        XCTAssertEqual(am.root[0].append(UInt16(0x1111)), .success)
        XCTAssertEqual(am.root[0].append(UInt16(0x2222)), .success)
        XCTAssertEqual(am.root[0].append(UInt16(0x3333)), .success)
        
        XCTAssertEqual(am.root[0].append(UInt16(0x4444)), .success)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00,  0x90, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x38, 0x00, 0x00, 0x00,
            
            // array element 1
            0x11, 0x00, 0x00, 0x00,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x34, 0x12, 0xBB, 0xAA,  0x76, 0x76, 0x86, 0x86,
            0x96, 0x96, 0x11, 0x11,  0x22, 0x22, 0x33, 0x33,
            0x44, 0x44, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            // array element 2
            0x11, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x78, 0x56, 0x34, 0x12,  0xDD, 0xCC, 0xBB, 0x7A,
            0xCC, 0xCC, 0x88, 0x48,  0x00, 0x00, 0x00, 0x00,
            0x44, 0x44, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00
            ])
        
        exp.withUnsafeBytes() { (ptr: UnsafePointer<UInt8>) -> () in
            let p = am.getActivePortal(for: UnsafeMutableRawPointer(mutating: ptr))
            XCTAssertTrue(p == am.root)
        }
        
        XCTAssertEqual(portal.uint16, 0xAABB)
        XCTAssertEqual(portal1.int32, 0x4888CCCC)
    }
}

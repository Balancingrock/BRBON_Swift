//
//  Dictionary-Tests.swift
//  BRBON
//
//  Created by Marinus van der Lugt on 13/02/18.
//
//

import XCTest
import BRUtils
@testable import BRBON


class Dictionary_Tests: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func test() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Instance
        
        let dm = ItemManager.createDictionaryManager(endianness: Endianness.little)
        
        
        // Properties
        
        XCTAssertEqual(dm.root.itemType, ItemType.dictionary)
        XCTAssertEqual(dm.root.count, 0)
        
        
        // Data structure
        
        var exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(dm.data, exp)
        
        
        // Add a Null item
        
        XCTAssertEqual(dm.root.updateItem(Null(), withNameField: NameField("null")), .success)
        XCTAssertEqual(dm.root.count, 1)
        XCTAssertTrue(dm.root["null"].isNull)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,

            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add a Bool item
        
        XCTAssertEqual(dm.root.updateItem(true, withNameField: NameField("bool")), .success)
        XCTAssertEqual(dm.root.count, 2)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add an Int8
        
        XCTAssertEqual(dm.root.updateItem(Int8(0x12), withNameField: NameField("int8")), .success)
        XCTAssertEqual(dm.root.count, 3)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,

            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add an Int16
        
        XCTAssertEqual(dm.root.updateItem(Int16(0x1234), withNameField: NameField("int16")), .success)
        XCTAssertEqual(dm.root.count, 4)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x78, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x04, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            ])
        
        XCTAssertEqual(dm.data, exp)

        // Add an Int32
        
        XCTAssertEqual(dm.root.updateItem(Int32(0x12345678), withNameField: NameField("int32")), .success)
        XCTAssertEqual(dm.root.count, 5)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x90, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,

            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add an Int64
        
        XCTAssertEqual(dm.root.updateItem(Int64(0x1234567887654321), withNameField: NameField("int64")), .success)
        XCTAssertEqual(dm.root.count, 6)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xB0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x06, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,

            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12
            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add an UInt8
        
        XCTAssertEqual(dm.root.updateItem(UInt8(0x12), withNameField: NameField("uint8")), .success)
        XCTAssertEqual(dm.root.count, 7)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xC8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x07, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,

            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            ])
        
        XCTAssertEqual(dm.data, exp)
        
        
        // Add an UInt16
        
        XCTAssertEqual(dm.root.updateItem(UInt16(0x1234), withNameField: NameField("uint16")), .success)
        XCTAssertEqual(dm.root.count, 8)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xe8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x08, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,

            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(dm.data, exp)
        
        
        // Add an UInt32
        
        XCTAssertEqual(dm.root.updateItem(UInt32(0x12345678), withNameField: NameField("uint32")), .success)
        XCTAssertEqual(dm.root.count, 9)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x08, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x09, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            ])

        XCTAssertEqual(dm.data, exp)
        
        
        // Add an UInt64
        
        XCTAssertEqual(dm.root.updateItem(UInt64(0x1234567887654321), withNameField: NameField("uint64")), .success)
        XCTAssertEqual(dm.root.count, 10)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x30, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0A, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12
            ])

        XCTAssertEqual(dm.data, exp)
    
    
        // Add an Float32
        
        XCTAssertEqual(dm.root.updateItem(Float32(12), withNameField: NameField("float32")), .success)
        XCTAssertEqual(dm.root.count, 11)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x50, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0B, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            ])

        XCTAssertEqual(dm.data, exp)
        
        
        // Add an Float64
        
        XCTAssertEqual(dm.root.updateItem(Float64(1.23), withNameField: NameField("float64")), .success)
        XCTAssertEqual(dm.root.count, 12)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x78, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0c, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f

            ])

        XCTAssertEqual(dm.data, exp)

        
        // Add a string
        
        XCTAssertEqual(dm.root.updateItem(BRString("string"), withNameField: NameField("string")), .success)
        XCTAssertEqual(dm.root.count, 13)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xa8, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0d, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add a CrcString
        
        XCTAssertEqual(dm.root.updateItem(BRCrcString("crcstring"), withNameField: NameField("crcstring")), .success)
        XCTAssertEqual(dm.root.count, 14)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xe0, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0e, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(dm.data, exp)

        
        // Add a Binary
        
        XCTAssertEqual(dm.root.updateItem(Data(bytes: [0x11, 0x22, 0x33]), withNameField: NameField("binary")), .success)
        XCTAssertEqual(dm.root.count, 15)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x08, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x0f, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add a CrcBinary
        
        XCTAssertEqual(dm.root.updateItem(BRCrcBinary(Data(bytes: [0x11, 0x22, 0x33])), withNameField: NameField("crcbinary")), .success)
        XCTAssertEqual(dm.root.count, 16)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x38, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x10, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,

            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add an Array
        
        let aim = ItemManager.createArrayManager(values: [true, true, false])
        
        XCTAssertEqual(dm.root.updateItem(aim, withNameField: NameField("array")), .success)
        XCTAssertEqual(dm.root.count, 17)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["array"].isArray)
        XCTAssertTrue(dm.root["array"][0].bool!)
        XCTAssertTrue(dm.root["array"][1].bool!)
        XCTAssertFalse(dm.root["array"][2].bool!)

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x68, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x11, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,
            
            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x11, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xee, 0xd9, 0x05, 0x61,  0x72, 0x72, 0x61, 0x79,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            ])

        XCTAssertEqual(dm.data, exp)

        
        // Add a dctionary
        
        let dim = ItemManager.createDictionaryManager()
        guard dim.root.updateItem(Null(), withNameField: NameField("null")) == .success else { XCTFail(); return }
        
        XCTAssertEqual(dm.root.updateItem(dim, withNameField: NameField("dict")), .success)
        XCTAssertEqual(dm.root.count, 18)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["array"].isArray)
        XCTAssertTrue(dm.root["array"][0].bool!)
        XCTAssertTrue(dm.root["array"][1].bool!)
        XCTAssertFalse(dm.root["array"][2].bool!)
        XCTAssertTrue(dm.root["dict"].isDictionary)
        XCTAssertTrue(dm.root["dict"]["null"].isNull)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xa0, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,
            
            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x11, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xee, 0xd9, 0x05, 0x61,  0x72, 0x72, 0x61, 0x79,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x12, 0x00, 0x00, 0x08,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xe7, 0xfb, 0x04, 0x64,  0x69, 0x63, 0x74, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Sequence & table skipped until they have been tested
        
        
        // Add a UUID
        
        guard let u = UUID(uuidString: "01234567-1234-1234-1234-123456789011") else { XCTFail(); return }
        
        XCTAssertEqual(dm.root.updateItem(u, withNameField: NameField("uuid")), .success)
        XCTAssertEqual(dm.root.count, 19)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["array"].isArray)
        XCTAssertTrue(dm.root["array"][0].bool!)
        XCTAssertTrue(dm.root["array"][1].bool!)
        XCTAssertFalse(dm.root["array"][2].bool!)
        XCTAssertTrue(dm.root["dict"].isDictionary)
        XCTAssertTrue(dm.root["dict"]["null"].isNull)
        XCTAssertTrue(dm.root["uuid"].isUuid)
        XCTAssertEqual(dm.root["uuid"], u)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xc8, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x13, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,
            
            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x11, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xee, 0xd9, 0x05, 0x61,  0x72, 0x72, 0x61, 0x79,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x12, 0x00, 0x00, 0x08,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xe7, 0xfb, 0x04, 0x64,  0x69, 0x63, 0x74, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x15, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x24, 0x6d, 0x04, 0x75,  0x75, 0x69, 0x64, 0x00,
            0x01, 0x23, 0x45, 0x67,  0x12, 0x34, 0x12, 0x34,
            0x12, 0x34, 0x12, 0x34,  0x56, 0x78, 0x90, 0x11,

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add a Color
        
        let c = BRColor(NSColor.blue)
        
        XCTAssertEqual(dm.root.updateItem(c, withNameField: NameField("color")), .success)
        XCTAssertEqual(dm.root.count, 20)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["array"].isArray)
        XCTAssertTrue(dm.root["array"][0].bool!)
        XCTAssertTrue(dm.root["array"][1].bool!)
        XCTAssertFalse(dm.root["array"][2].bool!)
        XCTAssertTrue(dm.root["dict"].isDictionary)
        XCTAssertTrue(dm.root["dict"]["null"].isNull)
        XCTAssertTrue(dm.root["uuid"].isUuid)
        XCTAssertEqual(dm.root["uuid"], u)
        XCTAssertTrue(dm.root["color"].isColor)
        XCTAssertEqual(dm.root["color"], c)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0xe0, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x14, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,
            
            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x11, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xee, 0xd9, 0x05, 0x61,  0x72, 0x72, 0x61, 0x79,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x12, 0x00, 0x00, 0x08,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xe7, 0xfb, 0x04, 0x64,  0x69, 0x63, 0x74, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x15, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x24, 0x6d, 0x04, 0x75,  0x75, 0x69, 0x64, 0x00,
            0x01, 0x23, 0x45, 0x67,  0x12, 0x34, 0x12, 0x34,
            0x12, 0x34, 0x12, 0x34,  0x56, 0x78, 0x90, 0x11,
            
            0x16, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0xFF, 0xFF,
            0xb4, 0xd4, 0x05, 0x63,  0x6f, 0x6c, 0x6f, 0x72

            ])
        
        XCTAssertEqual(dm.data, exp)

        
        // Add a Font
        
        let f = BRFont(NSFont(name:"Courier", size: 12.0))
        
        XCTAssertEqual(dm.root.updateItem(f, withNameField: NameField("font")), .success)
        XCTAssertEqual(dm.root.count, 21)
        XCTAssertTrue(dm.root["null"].isNull)
        XCTAssertTrue(dm.root["bool"].isBool)
        XCTAssertEqual(dm.root["bool"], true)
        XCTAssertTrue(dm.root["int8"].isInt8)
        XCTAssertEqual(dm.root["int8"], Int8(0x12))
        XCTAssertTrue(dm.root["int16"].isInt16)
        XCTAssertEqual(dm.root["int16"], Int16(0x1234))
        XCTAssertTrue(dm.root["int32"].isInt32)
        XCTAssertEqual(dm.root["int32"], Int32(0x12345678))
        XCTAssertTrue(dm.root["int64"].isInt64)
        XCTAssertEqual(dm.root["int64"], Int64(0x1234567887654321))
        XCTAssertTrue(dm.root["uint8"].isUInt8)
        XCTAssertEqual(dm.root["uint8"], UInt8(0x12))
        XCTAssertTrue(dm.root["uint16"].isUInt16)
        XCTAssertEqual(dm.root["uint16"], UInt16(0x1234))
        XCTAssertTrue(dm.root["uint32"].isUInt32)
        XCTAssertEqual(dm.root["uint32"], UInt32(0x12345678))
        XCTAssertTrue(dm.root["uint64"].isUInt64)
        XCTAssertEqual(dm.root["uint64"], UInt64(0x1234567887654321))
        XCTAssertTrue(dm.root["float32"].isFloat32)
        XCTAssertEqual(dm.root["float32"], Float32(12))
        XCTAssertTrue(dm.root["float64"].isFloat64)
        XCTAssertEqual(dm.root["float64"], Float64(1.23))
        XCTAssertTrue(dm.root["string"].isString)
        XCTAssertEqual(dm.root["string"], "string")
        XCTAssertTrue(dm.root["crcstring"].isCrcString)
        XCTAssertEqual(dm.root["crcstring"], "crcstring")
        XCTAssertTrue(dm.root["binary"].isBinary)
        XCTAssertEqual(dm.root["binary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["crcbinary"].isCrcBinary)
        XCTAssertEqual(dm.root["crcbinary"], Data(bytes: [0x11, 0x22, 0x33]))
        XCTAssertTrue(dm.root["array"].isArray)
        XCTAssertTrue(dm.root["array"][0].bool!)
        XCTAssertTrue(dm.root["array"][1].bool!)
        XCTAssertFalse(dm.root["array"][2].bool!)
        XCTAssertTrue(dm.root["dict"].isDictionary)
        XCTAssertTrue(dm.root["dict"]["null"].isNull)
        XCTAssertTrue(dm.root["uuid"].isUuid)
        XCTAssertEqual(dm.root["uuid"], u)
        XCTAssertTrue(dm.root["color"].isColor)
        XCTAssertEqual(dm.root["color"], c)
        XCTAssertTrue(dm.root["font"].isFont)
        XCTAssertEqual(dm.root["font"], f)

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x10, 0x03, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x15, 0x00, 0x00, 0x00,
            
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x02, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x02, 0x78, 0x04, 0x62,  0x6f, 0x6f, 0x6c, 0x00,
            
            0x03, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0x5a, 0x93, 0x04, 0x69,  0x6e, 0x74, 0x38, 0x00,
            
            0x04, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x95, 0x7d, 0x05, 0x69,  0x6e, 0x74, 0x31, 0x36,
            
            0x05, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x95, 0xde, 0x05, 0x69,  0x6e, 0x74, 0x33, 0x32,
            
            0x06, 0x00, 0x00, 0x08,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x16, 0x8c, 0x05, 0x69,  0x6e, 0x74, 0x36, 0x34,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x07, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x12, 0x00, 0x00, 0x00,
            0xd7, 0x58, 0x05, 0x75,  0x69, 0x6e, 0x74, 0x38,
            
            0x08, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x34, 0x12, 0x00, 0x00,
            0x9e, 0x18, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x31,
            0x36, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x09, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x78, 0x56, 0x34, 0x12,
            0x9e, 0xBB, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x33,
            0x32, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0A, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe9, 0x06, 0x75,  0x69, 0x6e, 0x74, 0x36,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x21, 0x43, 0x65, 0x87,  0x78, 0x56, 0x34, 0x12,
            
            0x0B, 0x00, 0x00, 0x10,  0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x40, 0x41,
            0x11, 0xa0, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x33, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0C, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x92, 0xf2, 0x07, 0x66,  0x6c, 0x6f, 0x61, 0x74,
            0x36, 0x34, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xae, 0x47, 0xe1, 0x7a,  0x14, 0xae, 0xf3, 0x3f,
            
            0x0d, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x1d, 0xe6, 0x06, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00,  0x73, 0x74, 0x72, 0x69,
            0x6e, 0x67, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0e, 0x00, 0x00, 0x10,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x74, 0xef, 0x09, 0x63,  0x72, 0x63, 0x73, 0x74,
            0x72, 0x69, 0x6e, 0x67,  0x00, 0x00, 0x00, 0x00,
            0x50, 0x7a, 0xb0, 0xf8,  0x09, 0x00, 0x00, 0x00,
            0x63, 0x72, 0x63, 0x73,  0x74, 0x72, 0x69, 0x6e,
            0x67, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0f, 0x00, 0x00, 0x10,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xfc, 0x3f, 0x06, 0x62,  0x69, 0x6e, 0x61, 0x72,
            0x79, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x11, 0x22, 0x33, 0x00,
            
            0x10, 0x00, 0x00, 0x10,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x95, 0x36, 0x09, 0x63,  0x72, 0x63, 0x62, 0x69,
            0x6e, 0x61, 0x72, 0x79,  0x00, 0x00, 0x00, 0x00,
            0x63, 0x37, 0xc7, 0xfa,  0x03, 0x00, 0x00, 0x00,
            0x11, 0x22, 0x33, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x11, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xee, 0xd9, 0x05, 0x61,  0x72, 0x72, 0x61, 0x79,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x12, 0x00, 0x00, 0x08,  0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xe7, 0xfb, 0x04, 0x64,  0x69, 0x63, 0x74, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x20, 0x1f, 0x04, 0x6e,  0x75, 0x6c, 0x6c, 0x00,
            
            0x15, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x24, 0x6d, 0x04, 0x75,  0x75, 0x69, 0x64, 0x00,
            0x01, 0x23, 0x45, 0x67,  0x12, 0x34, 0x12, 0x34,
            0x12, 0x34, 0x12, 0x34,  0x56, 0x78, 0x90, 0x11,
            
            0x16, 0x00, 0x00, 0x08,  0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0xFF, 0xFF,
            0xb4, 0xd4, 0x05, 0x63,  0x6f, 0x6c, 0x6f, 0x72,
            
            0x17, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x02, 0xd2, 0x04, 0x66,  0x6f, 0x6e, 0x74, 0x00,
            0x00, 0x00, 0x40, 0x41,  0x07, 0x07, 0x43, 0x6f,
            0x75, 0x72, 0x69, 0x65,  0x72, 0x43, 0x6f, 0x75,
            0x72, 0x69, 0x65, 0x72,  0x00, 0x00, 0x00, 0x00

            ])
        
        XCTAssertEqual(dm.data, exp)
    }

    
    func testSizeChangesAndRemoval() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let dm = ItemManager.createDictionaryManager()
        
        XCTAssertEqual(dm.root.updateItem(BRString("11111111")!, withNameField: NameField("11")), .success)
        XCTAssertEqual(dm.root.updateItem(BRString("22222222")!, withNameField: NameField("22")), .success)
        XCTAssertEqual(dm.root.updateItem(BRString("33333333")!, withNameField: NameField("33")), .success)
        
        var exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x90, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xd4, 0x44, 0x02, 0x31,  0x31, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x31, 0x31, 0x31, 0x31,
            0x31, 0x31, 0x31, 0x31,  0x00, 0x00, 0x00, 0x00,

            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x94, 0xb5, 0x02, 0x32,  0x32, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x32, 0x32, 0x32, 0x32,
            0x32, 0x32, 0x32, 0x32,  0x00, 0x00, 0x00, 0x00,

            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x54, 0xe5, 0x02, 0x33,  0x33, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00,
            ])

        XCTAssertEqual(dm.data, exp)

        XCTAssertEqual(dm.root.updateItem(BRString("4444444444444"), withNameField: NameField("22")), .success)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x98, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xd4, 0x44, 0x02, 0x31,  0x31, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x31, 0x31, 0x31, 0x31,
            0x31, 0x31, 0x31, 0x31,  0x00, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x94, 0xb5, 0x02, 0x32,  0x32, 0x00, 0x00, 0x00,
            0x0D, 0x00, 0x00, 0x00,  0x34, 0x34, 0x34, 0x34,
            0x34, 0x34, 0x34, 0x34,  0x34, 0x34, 0x34, 0x34,
            0x34, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x54, 0xe5, 0x02, 0x33,  0x33, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00,
            ])

        XCTAssertEqual(dm.data, exp)

        XCTAssertEqual(dm.root.updateItem(BRString("55"), withNameField: NameField("22")), .success)

        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x98, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0xd4, 0x44, 0x02, 0x31,  0x31, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x31, 0x31, 0x31, 0x31,
            0x31, 0x31, 0x31, 0x31,  0x00, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x94, 0xb5, 0x02, 0x32,  0x32, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x35, 0x35, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x54, 0xe5, 0x02, 0x33,  0x33, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00,
            ])

        
        XCTAssertEqual(dm.root.removeItem(withNameField: NameField("44")), .error(.itemNotFound))

        XCTAssertEqual(dm.data, exp)

        XCTAssertEqual(dm.root.removeItem(withNameField: NameField("11")), .success)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x98, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x94, 0xb5, 0x02, 0x32,  0x32, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x35, 0x35, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x54, 0xe5, 0x02, 0x33,  0x33, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00,  0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            ])

        XCTAssertEqual(dm.data, exp)

        XCTAssertEqual(dm.root.removeItem(withNameField: NameField("33")), .success)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x98, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
            
            0x0d, 0x00, 0x00, 0x08,  0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x94, 0xb5, 0x02, 0x32,  0x32, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00,  0x35, 0x35, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            ])

        XCTAssertEqual(dm.data, exp)

        XCTAssertEqual(dm.root.removeItem(withNameField: NameField("22")), .success)
        
        exp = Data(bytes: [
            0x12, 0x00, 0x00, 0x00,  0x98, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

            ])

        XCTAssertEqual(dm.data, exp)
    }
    
    func testPortals() {
        
    }
}

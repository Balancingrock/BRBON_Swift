//
//  Array-Tests.swift
//  BRBON
//
//  Created by Marinus van der Lugt on 13/02/18.
//
//

import XCTest
import BRUtils
@testable import BRBON

class Array_Tests: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    
    func testEmptyBoolArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .bool, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .bool)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultBoolArray() {

        ItemManager.startWithZeroedBuffers = true

        let brArr: Array<Bool> = [true, true, false]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 8)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .bool)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ])

        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], true)
        XCTAssertEqual(am.root[1], true)
        XCTAssertEqual(am.root[2], false)
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(false), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], false)

        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: true), Result.success)

        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)

        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(exp, am.data)

        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(false, atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testEmptyInt8Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .int8, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .int8)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testDefaultInt8Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<Int8> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 8)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .int8)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], Int8(1))
        XCTAssertEqual(am.root[1], Int8(2))
        XCTAssertEqual(am.root[2], Int8(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.append(Int8(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], Int8(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: Int8(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x05,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insert(Int8(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x00, 0x05,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testEmptyInt16Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .int16, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .int16)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 2)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultInt16Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<Int16> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 8)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .int16)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 2)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], Int16(1))
        XCTAssertEqual(am.root[1], Int16(2))
        XCTAssertEqual(am.root[2], Int16(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(Int16(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], Int16(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: Int16(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(Int16(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testEmptyInt32Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .int32, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .int32)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 4)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultInt32Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<Int32> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .int32)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 4)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], Int32(1))
        XCTAssertEqual(am.root[1], Int32(2))
        XCTAssertEqual(am.root[2], Int32(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(Int32(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], Int32(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: Int32(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(Int32(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testEmptyInt64Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .int64, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .int64)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultInt64Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<Int64> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .int64)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], Int64(1))
        XCTAssertEqual(am.root[1], Int64(2))
        XCTAssertEqual(am.root[2], Int64(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(Int64(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], Int64(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: Int64(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(Int64(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testEmptyUInt8Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .uint8, elementByteCount: 1, elementCount: 0, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uint8)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    
    func testDefaultUInt8Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<UInt8> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 8)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .uint8)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 1)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], UInt8(1))
        XCTAssertEqual(am.root[1], UInt8(2))
        XCTAssertEqual(am.root[2], UInt8(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(UInt8(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], UInt8(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: UInt8(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x05,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(UInt8(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x03, 0x04, 0x05, 0x05, 0x05, 0x00, 0x05,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    
    func testEmptyUInt16Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .uint16, elementByteCount: 2, elementCount: 0, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uint16)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 2)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testDefaultUInt16Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<UInt16> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 8)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .uint16)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 2)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], UInt16(1))
        XCTAssertEqual(am.root[1], UInt16(2))
        XCTAssertEqual(am.root[2], UInt16(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(UInt16(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], UInt16(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: UInt16(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(UInt16(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testEmptyUInt32Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .uint32, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uint32)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 4)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultUInt32Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<UInt32> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 16)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .uint32)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 4)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], UInt32(1))
        XCTAssertEqual(am.root[1], UInt32(2))
        XCTAssertEqual(am.root[2], UInt32(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(UInt32(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], UInt32(4))
        
        
        // Create more elements, overflow value field byte count
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: UInt32(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(UInt32(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 40)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testEmptyUInt64Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .uint64, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uint64)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultUInt64Array() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<UInt64> = [1, 2, 3]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .uint64)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], UInt64(1))
        XCTAssertEqual(am.root[1], UInt64(2))
        XCTAssertEqual(am.root[2], UInt64(3))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(UInt64(4)), Result.success)
        
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], UInt64(4))
        
        
        // Create more elements
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: UInt64(5)), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(UInt64(0), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 72)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

    func testEmptyStringArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .string, elementByteCount: 8, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .string)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultStringArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<String> = ["1111", "22", "3333"]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .string)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x31,
            0x02, 0x00, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], "1111")
        XCTAssertEqual(am.root[1], "22")
        XCTAssertEqual(am.root[2], "3333")
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(BRString("444444")), Result.success)
        
        XCTAssertEqual(am.root._arrayElementByteCount, 16)
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], "444444")
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            
            0x04, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x31,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x34, 0x34, 0x34, 0x34,  0x34, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(exp, am.data)

        
        // Create more elements
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: BRString("55555")), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x31,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x34, 0x34, 0x34, 0x34,  0x34, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x34, 0x34, 0x34, 0x34,  0x34, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])

        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(BRString("0000"), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x32, 0x32, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x34, 0x34, 0x34, 0x34,  0x34, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x35,  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        am.data.printBytes()

        XCTAssertEqual(exp, am.data)
    }

    func testEmptyBinaryArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .binary, elementByteCount: 8, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .binary)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testDefaultBinaryArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        let brArr: Array<Data> = [Data(bytes: [0x11, 0x12, 0x13]), Data(bytes: [0x21, 0x22]), Data(bytes: [0x31, 0x32, 0x33, 0x34])]
        
        guard let am = ItemManager.createArrayManager(values: brArr) else { XCTFail(); return }
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 24)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 3)
        XCTAssertEqual(am.root._arrayElementType, .binary)
        XCTAssertEqual(am.root._arrayElementCount, 3)
        XCTAssertEqual(am.root._arrayElementByteCount, 8)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x11, 0x12, 0x13, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x21, 0x22, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34
            ])
        
        XCTAssertEqual(exp, am.data)
        
        XCTAssertEqual(am.root[0], Data(bytes: [0x11, 0x12, 0x13]))
        XCTAssertEqual(am.root[1], Data(bytes: [0x21, 0x22]))
        XCTAssertEqual(am.root[2], Data(bytes: [0x31, 0x32, 0x33, 0x34]))
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(Data(bytes: [0x41, 0x42, 0x43, 0x44, 0x45, 0x46])), Result.success)
        
        XCTAssertEqual(am.root._arrayElementByteCount, 16)
        XCTAssertEqual(am.root.count, 4)
        XCTAssertEqual(am.root[3], Data(bytes: [0x41, 0x42, 0x43, 0x44, 0x45, 0x46]))
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            
            0x03, 0x00, 0x00, 0x00, 0x11, 0x12, 0x13, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x21, 0x22, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Create more elements
        
        XCTAssertEqual(am.root.createNewElements(amount: 5, value: Data(bytes: [0x51, 0x52])), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x11, 0x12, 0x13, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x21, 0x22, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 8)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x21, 0x22, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(Data(bytes: [0x00, 0x00]), atIndex: 6), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 144)
        XCTAssertEqual(am.root.count, 9)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x21, 0x22, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x51, 0x52, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        am.data.printBytes()
        
        XCTAssertEqual(exp, am.data)
    }

    func testUuidArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .uuid, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uuid)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 16)
        
        var exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Append a new element
        
        XCTAssertEqual(am.root.appendElement(UUID(uuidString: "11111111-2222-3333-4444-555555555555")), Result.success)
        
        XCTAssertEqual(am.root._arrayElementByteCount, 16)
        XCTAssertEqual(am.root.count, 1)
        XCTAssertEqual(am.root[0], UUID(uuidString: "11111111-2222-3333-4444-555555555555")!)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            
            0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33,  0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Create more elements
        
        XCTAssertEqual(am.root.createNewElements(amount: 3, value: UUID(uuidString: "22222222-3333-4444-5555-666666666666")), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 64)
        XCTAssertEqual(am.root.count, 4)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33,  0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
            ])
        am.data.printBytes()
        
        XCTAssertEqual(exp, am.data)
        
        
        // Remove an element
        
        XCTAssertEqual(am.root.removeElement(at: 0), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 64)
        XCTAssertEqual(am.root.count, 3)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
        
        
        // Insert an element
        
        XCTAssertEqual(am.root.insertElement(UUID(uuidString: "00000000-0000-0000-0000-000000000000"), atIndex: 2), Result.success)
        
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset + 64)
        XCTAssertEqual(am.root.count, 4)
        
        exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x44, 0x44,  0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
            ])
        am.data.printBytes()
        
        XCTAssertEqual(exp, am.data)
    }
    
    func testFontArray() {
        
        ItemManager.startWithZeroedBuffers = true
        
        
        // Start an empty array
        
        let am = ItemManager.createArrayManager(elementType: .font, endianness: Endianness.little)
        
        XCTAssertTrue(am.root.isValid)
        XCTAssertEqual(am.root.itemType, .array)
        XCTAssertEqual(am.root.itemOptions, ItemOptions.none)
        XCTAssertEqual(am.root.itemFlags, ItemFlags.none)
        XCTAssertEqual(am.root._itemNameFieldByteCount, 0)
        XCTAssertEqual(am.root._itemByteCount, itemMinimumByteCount + arrayElementBaseOffset)
        XCTAssertEqual(am.root._itemParentOffset, 0)
        XCTAssertEqual(am.root._itemSmallValue, 0)
        
        XCTAssertEqual(am.root.count, 0)
        XCTAssertEqual(am.root._arrayElementType, .uuid)
        XCTAssertEqual(am.root._arrayElementCount, 0)
        XCTAssertEqual(am.root._arrayElementByteCount, 16)
        
        let exp = Data(bytes: [
            0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
            ])
        
        XCTAssertEqual(exp, am.data)
    }

}
